Create a Camunda 8 form JSON file for the [TaskName] UserTaskDsl with the following requirements:

### **Form Structure Requirements:**
1. **Input Fields (In case class)**: All fields should be READ-ONLY for display purposes
2. **Output Fields (Out case class)**: All fields should be EDITABLE for user input
3. **Organization**: Use sections with subtitles (## Section Name) for logical grouping
4. **Sub-objects**: Create separate sections with appropriate subtitles for nested objects

### **Form Element Selection:**
- Use the most appropriate form elements for each data type:
  - `textfield` for strings
  - `number` for numeric values (Long, Int, Double)
  - `checkbox` for boolean values
  - `select` for enums with predefined options
  - `textarea` for longer text content
  - `datetime` for date/time fields (see datetime configuration below)
  - `dynamiclist` for arrays/lists (Camunda 8.4+)
  - `text` with templating for arrays in older versions

### **DateTime Field Configuration:**
- **Use `dateLabel` instead of `label`** for datetime fields
- **For LocalDate fields**: Use `subtype: "date"`
- **For LocalDateTime fields**: Use `subtype: "datetime"`
- **Do NOT use `timeLabel`** - avoid time labels entirely

### **Layout Requirements:**
- **All fields**: Use `columns: null` instead of specific column numbers
- **Responsive Design**: Use row-based layout for proper field arrangement
- **Conditional Display**: Hide optional sections when data is null using `conditional.hide`

### **Advanced Features:**
- **Validation**: Add `validate.required` for mandatory output fields

### **File Requirements:**
- **Location**: Save to `./src/main/resources/camunda8/[TaskName].form`
- **Form ID**: Must match the external reference in BPMN (usually the TaskName)
- **Schema Version**: Use version 16
- **Execution Platform**: "Camunda Cloud" with appropriate version

### **Data Binding:**
- Input fields: Use dot notation to access nested properties (e.g., `client.firstName`)
- Output fields: Use simple property names (e.g., `approved`, `comment`)
- Array elements: Use array indexing or dynamic list path binding

### **Example DateTime Field Structure:**
```json
// LocalDate field (date only)
{
  "dateLabel": "Date of Birth",
  "type": "datetime",
  "subtype": "date",
  "id": "Field_dateOfBirth",
  "key": "client.dateOfBirth",
  "readonly": true,
  "layout": {
    "row": "Row_dates",
    "columns": null
  },
  "conditional": {
    "hide": "=client.dateOfBirth = null"
  }
}

// LocalDateTime field (date + time)
{
  "dateLabel": "Created At",
  "type": "datetime",
  "subtype": "datetime",
  "id": "Field_createdAt",
  "key": "client.createdAt",
  "readonly": true,
  "layout": {
    "row": "Row_dates",
    "columns": null
  },
  "conditional": {
    "hide": "=client.createdAt = null"
  }
}